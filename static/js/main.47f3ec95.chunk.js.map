{"version":3,"sources":["data/vehicle_paths.csv","Containers/ServingRatePlot.js","Containers/ServingHeatMap.js","Containers/SpeedViolation25.js","Containers/PassengerViolation4.js","Containers/PassengerOverall.js","Containers/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ServingRatePlot","props","state","plot","React","Component","ServingHeatMap","SpeedViolation25","PassengerViolation4","PassengerOverall","Home","Navigation","Navbar","collapseOnSelect","expand","bg","variant","sticky","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","App","path","d3","data","then","forEach","row","undefined","Vehicle_ID","push","Timestamp","Latitude","Longitude","Num_Passengers","setState","catch","err","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,2C,sOCmB5BC,E,YAhBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,cAHK,E,sEAQf,OACI,wE,GAVkBC,IAAMC,WCiBrBC,E,YAhBX,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,cAHK,E,sEAQf,OACI,kE,GAViBC,IAAMC,WCiBpBE,E,YAhBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,cAHK,E,sEAQf,OACI,0E,GAVmBC,IAAMC,WCiBtBG,E,YAhBX,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,cAHK,E,sEAQf,OACI,2E,GAVsBC,IAAMC,WCiBzBI,E,YAhBX,WAAYR,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,cAHK,E,sEAQf,OACI,6E,GAVmBC,IAAMC,WCiBtBK,E,YAhBX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,cAHK,E,sEAQf,OACI,yF,GAVOC,IAAMC,W,iCCiBzB,SAASM,EAAWV,GAClB,OAEE,kBAACW,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,OACnE,kBAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,aAAnB,QACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,mCAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,oBAAf,gBACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,uBAAf,eACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,yBAAf,mBACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,4BAAf,uBACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,yBAAf,kBAEF,kBAACK,EAAA,EAAD,Q,IAqDOG,E,YA3Cb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX0B,KAAM,IAHS,E,iFAOE,IAAD,OACdA,EAAO,GACXC,IAAOC,KAAMC,MAAK,SAAAD,GAChBA,EAAKE,SAAQ,SAAAC,QACkBC,IAAzBN,EAAKK,EAAIE,cACXP,EAAKK,EAAIE,YAAc,CAAE,GAAMF,EAAIE,WAAY,EAAK,KAEtDP,EAAKK,EAAIE,YAAT,EAA0BC,KAAK,CAACH,EAAII,UAAWJ,EAAIK,SAAUL,EAAIM,UAAWN,EAAIO,oBAElF,EAAKC,SAAS,CAAEb,KAAMA,OACrBc,OAAM,SAAUC,GACjB,MAAMA,O,+BAIR,OACE,kBAAC,IAAD,KACE,kBAAChC,EAAD,MACA,yBAAKc,UAAU,+BACb,yBAAKA,UAAU,8BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,KAAK,mBAAmBgB,UAAW5C,IAC1C,kBAAC,IAAD,CAAO4B,KAAK,sBAAsBgB,UAAWtC,IAC7C,kBAAC,IAAD,CAAOsB,KAAK,wBAAwBgB,UAAWrC,IAC/C,kBAAC,IAAD,CAAOqB,KAAK,2BAA2BgB,UAAWpC,IAClD,kBAAC,IAAD,CAAOoB,KAAK,wBAAwBgB,UAAWnC,IAC/C,kBAAC,IAAD,CAAOmB,KAAK,YAAYgB,UAAWlC,Y,GAlC/BN,IAAMC,WC9BJwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.47f3ec95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vehicle_paths.1f53f514.csv\";","import React from 'react';\r\n\r\nclass ServingRatePlot extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plot: 'stackedBar'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Container for Plotting serving Rate\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ServingRatePlot;","import React from 'react';\r\n\r\nclass ServingHeatMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plot: 'stackedBar'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Container for Serving HeatMap\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ServingHeatMap;","import React from 'react';\r\n\r\nclass SpeedViolation25 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plot: 'stackedBar'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Container to simulate speed violation\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SpeedViolation25;","import React from 'react';\r\n\r\nclass PassengerViolation4 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plot: 'stackedBar'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Container simulate Passenger Violation\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PassengerViolation4;","import React from 'react';\r\n\r\nclass PassengerOverall extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plot: 'stackedBar'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Container to simulate Passengers Overall\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PassengerOverall;","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plot: 'stackedBar'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Container for Home to list of all the visualizations\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport './App.css';\nimport * as d3 from 'd3';\nimport ServingRatePlot from './Containers/ServingRatePlot';\nimport ServingHeatMap from './Containers/ServingHeatMap';\nimport SpeedViolation25 from './Containers/SpeedViolation25';\nimport PassengerViolation4 from './Containers/PassengerViolation4';\nimport PassengerOverall from './Containers/PassengerOverall';\nimport Home from './Containers/Home';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nimport data from './data/vehicle_paths.csv';\n\nfunction Navigation(props) {\n  return (\n\n    <Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\n      <Navbar.Brand href=\"/vis/Home\">Home</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav nav-right\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/vis/servingRate\">Serving Rate</Nav.Link>\n          <Nav.Link href=\"/vis/servingHeatMap\">Serving Map</Nav.Link>\n          <Nav.Link href=\"/vis/speedViolation25\">Speed Violation</Nav.Link>\n          <Nav.Link href=\"/vis/passengerViolation4\">Passenger Violation</Nav.Link>\n          <Nav.Link href=\"/vis/passengerOverall\">All Passenger</Nav.Link>\n        </Nav>\n        <Nav>\n\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      path: []\n    }\n  }\n\n  componentDidMount() {\n    let path = [];\n    d3.csv(data).then(data => {\n      data.forEach(row => {\n        if (path[row.Vehicle_ID] === undefined) {\n          path[row.Vehicle_ID] = { 'id': row.Vehicle_ID, 'p': [] }\n        }\n        path[row.Vehicle_ID]['p'].push([row.Timestamp, row.Latitude, row.Longitude, row.Num_Passengers]);\n      })\n      this.setState({ path: path })\n    }).catch(function (err) {\n      throw err;\n    })\n  }\n  render() {\n    return (\n      <Router>\n        <Navigation />\n        <div className=\"container-fluid text-center\">\n          <div className=\"row justify-content-center\">\n            <Switch>\n              <Route path=\"/vis/servingRate\" component={ServingRatePlot} />\n              <Route path=\"/vis/servingHeatMap\" component={ServingHeatMap} />\n              <Route path=\"/vis/speedViolation25\" component={SpeedViolation25} />\n              <Route path=\"/vis/passengerViolation4\" component={PassengerViolation4} />\n              <Route path=\"/vis/passengerOverall\" component={PassengerOverall} />\n              <Route path=\"/vis/Home\" component={Home} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}